#!/usr/bin/env node

const fs = require('fs');
const app = require('../app');
// var debug = require('debug')('connectiveunconscious:server');
const http = require('http');
const { argv } = require('process');

// Are we using https?
const use_https = argv.includes('s');

// optional https support
if (use_https)
{
  const https = require('https');
  const express = require('express');

  // Get credentials
  var credentials = {
    key: fs.readFileSync('/etc/letsencrypt/live/connectiveunconscious.com/privkey.pem', 'utf8'),
    cert: fs.readFileSync('/etc/letsencrypt/live/connectiveunconscious.com/cert.pem', 'utf8'),
    ca: fs.readFileSync('/etc/letsencrypt/live/connectiveunconscious.com/chain.pem', 'utf8')
  };

  // Feed our app into an https server
  const server = https.createServer(credentials, app);
  server.listen(443, () => {
    console.log('HTTPS Server running on port 443');
  });
  server.on('error', onError);

  // run a minimal http server to redirect
  const httpApp = express();
  httpApp.all('*', (req, res) => {
    res.redirect(301, 'https://' + req.headers.host + req.url);
  });
  const httpServer = http.createServer(httpApp);
  httpServer.listen(80, () => {
    console.log('HTTP redirect server running on port 80');
  });
  httpServer.on('error', onError);
}
else
{
  // just create a simple http server on port 8080 (for local testing)
  const server = http.createServer(app);
  server.listen(8080, () => {
    console.log('HTTP Server running on port 8080');
  });
  server.on('error', onError);
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}